//样式重置
* {
    box-sizing: border-box;
    outline: none; //去除高亮
}

html {
    font-size: 13px //根据设计图确定，默认16px
}

@media screen and (min-width:415px) and (max-width:639px) {
    html {
        font-size: 15px
    }
}

@media screen and (min-width:640px) and (max-width:719px) {
    html {
        font-size: 20px
    }
}

@media screen and (min-width:720px) and (max-width:749px) {
    html {
        font-size: 22.5px
    }
}

@media screen and (min-width:750px) and (max-width:799px) {
    html {
        font-size: 23.5px
    }
}

@media screen and (min-width:800px) {
    html {
        font-size: 28px
    }
}

body {
    //默认有边距
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.2rem;
    background: #f1f1f1;
    -webkit-font-smoothing:antialiased; //字体平滑，iPhone设备字体偏细
}
a{
  text-decoration: none;
  color:#333;
}
.text-overflow{
  text-overflow:ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

//网站颜色和字体定义（color,text）

//colors 定义变量,结尾必须加分号
$colors:("primary":#db9e3f,
    'white':#fff,
    "black":#000,
    "dark":#333,
    "gray":#999,
    "light":#f9f9f9,
    "primary2":#db9e3f,
    "border":#d4d9de
    );
$border-color:map-get($colors,'border');
.border{
  border-bottom:1px solid $border-color;
}

@each $colorKey,
$color in $colors {
    .text-#{$colorKey} {
        color: $color
    }

    .bg-#{$colorKey} {
        background-color: $color
    }
}

//text (left,center,right)
//each方法
@each $var in (left, center, right) {
    .text-#{$var} {
        text-align: $var
    }
}

//font-size  px2rem:alt+z  设置基准值alt+s或者setting里设置
$base-font-size:1rem;
//设置倍数，以后只需改base-font-size即可
$font-sizes:(
    xs:0.7692, //10px
    s:0.9231, //12px
    md:1, //13px
    lg:1.0769, //14px
    xl:1.2308 ,//16px
    xxl:1.5385 //20px
);

@each $sizeKey,
$size in $font-sizes {
    .fs-#{ $sizeKey } {
        font-size: $size * $base-font-size
    }
}

//flex布局  
.d-flex {
    display: flex
}
.flex-wrap{
  flex-wrap:wrap
}
.flex-colomn{
  flex-direction: column;
  //flex-direction属性决定主轴的方向（row | row-reverse | column | column-reverse;）。
}
//主轴对齐方式，交叉轴对齐方式
//jusity-content 项目在主轴上的对齐方式
$flex-jc:(start:flex-start,
    end:flex-end,
    center:center,
    between:space-between,
    around:space-around
);

@each $jcKey,
$jc in $flex-jc {
    .jc-#{$jcKey} {
        justify-content: $jc;
    }
}

//align-items  定义项目在交叉轴上如何对齐。
$flex-ai:(
  start:flex-start,
  end:flex-end,
  center:center,
  baseline:baseline,
  stretch:stretch   //交叉轴等高
);
@each $key,$value in $flex-ai{
  .ai-#{$key}{
    align-items:$value
  }
}

.flex-grow-1 {
    flex-grow: 1
}
.flex-1{//flex-grow-1  如果父元素空间有剩余，自动占据充满
  flex:1  //简写，flex-grow,flex-shrink都是1
}

//常用边距  spacing
//0-n 表示等级
//mt-1 => margin-top 1级  ， pb-2 => padding-bottom 2级
$spacing-types:(
  m:margin,
  p:padding
);
$spacing-directions:(
  t:top,
  r:right,
  b:bottom,
  l:left
);
$spacing-base-size:1rem;
$spacing-levels:(
  0 : 0,
  1 : 0.25,
  2 : 0.5,
  3 : 1,
  4 : 1.5,
  5 : 3
);
@each $typeKey,$type in $spacing-types {
  @each $directionKey,
  $direction in $spacing-directions {
    @each $sizeLevelKey,
    $sizeLevel in $spacing-levels {
      //.mt-1
      .#{$typeKey}#{$directionKey}-#{$sizeLevelKey}{
        #{$type}-#{$direction}:$spacing-base-size * $sizeLevel
      }
    }
  }
}
//.m-1
@each $typeKey,$type in $spacing-types {
  @each $sizeLevelKey,$sizeLevel in $spacing-levels{
    .#{$typeKey}-#{$sizeLevelKey}{
      #{$type}:$spacing-base-size * $sizeLevel
    }
  }
}
//.mx-1 .px-1 水平
@each $typeKey,$type in $spacing-types {
  @each $sizeLevelKey,$sizeLevel in $spacing-levels{
    .#{$typeKey}x-#{$sizeLevelKey} {
        #{$type}-left: $spacing-base-size * $sizeLevel;
        #{$type}-right: $spacing-base-size * $sizeLevel
    }
  }
}
//.my-1 .py-1 垂直
@each $typeKey,$type in $spacing-types {
  @each $sizeLevelKey,$sizeLevel in $spacing-levels{
    .#{$typeKey}y-#{$sizeLevelKey} {
        #{$type}-top: $spacing-base-size * $sizeLevel;
        #{$type}-bottom: $spacing-base-size * $sizeLevel
    }
  }
}
